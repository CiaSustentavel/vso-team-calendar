{"version":3,"sources":["Calendar/Utils/Date.ts"],"names":["ensureDate","isBetween","eventIn","getIterationId","loadIterations"],"mappings":";IAQA,oBAAoB,IAAmB;QACnCA,EAAEA,CAACA,CAACA,OAAOA,IAAIA,KAAKA,QAAQA,CAACA,CAACA,CAACA;YAC3BA,MAAMA,CAACA,IAAIA,IAAIA,CAASA,IAAIA,CAACA,CAACA;QAClCA,CAACA;QAEDA,MAAMA,CAAOA,IAAIA,CAACA;IACtBA,CAACA;IASD,mBAA0B,IAAU,EAAE,SAAe,EAAE,OAAa;QAChEC,IAAIA,KAAKA,GAAGA,IAAIA,CAACA,OAAOA,EAAEA,CAACA;QAC3BA,MAAMA,CAACA,KAAKA,IAAIA,SAASA,CAACA,OAAOA,EAAEA,IAAIA,KAAKA,IAAIA,OAAOA,CAACA,OAAOA,EAAEA,CAACA;IACtEA,CAACA;IAHe,iBAAS,YAGxB,CAAA;IAQD,iBAAwB,KAAuC,EAAE,KAAqC;QAClGC,EAAEA,CAACA,CAACA,CAACA,KAAKA,IAAIA,CAACA,KAAKA,CAACA,SAASA,IAAIA,CAACA,KAAKA,CAACA,OAAOA,CAACA,CAACA,CAACA;YAC/CA,MAAMA,CAACA,KAAKA,CAACA;QACjBA,CAACA;QAEDA,EAAEA,CAACA,CAACA,SAASA,CAACA,UAAUA,CAACA,KAAKA,CAACA,SAASA,CAACA,EAAEA,KAAKA,CAACA,SAASA,EAAEA,KAAKA,CAACA,OAAOA,CAACA,CAACA,CAACA,CAACA;YACzEA,MAAMA,CAACA,IAAIA,CAACA;QAChBA,CAACA;QAEDA,EAAEA,CAACA,CAACA,SAASA,CAACA,UAAUA,CAACA,KAAKA,CAACA,OAAOA,CAACA,EAAEA,KAAKA,CAACA,SAASA,EAAEA,KAAKA,CAACA,OAAOA,CAACA,CAACA,CAACA,CAACA;YACvEA,MAAMA,CAACA,IAAIA,CAACA;QAChBA,CAACA;QAEDA,MAAMA,CAACA,KAAKA,CAACA;IACjBA,CAACA;IAde,eAAO,UActB,CAAA;IAED,IAAI,WAAmD,CAAC;IACxD,IAAI,mBAAmB,GAAoB,CAAC,CAAC,KAAK,EAAO,CAAC;IAC1D,IAAI,iBAAiB,GAAG,mBAAmB,CAAC,OAAO,CAAC;IAEpD,wBAA+B,MAAY;QACvCC,IAAIA,QAAQA,GAAGA,CAACA,CAACA,KAAKA,EAAUA,CAACA;QACjCA,EAAEA,CAACA,CAACA,CAACA,WAAWA,CAACA,CAACA,CAACA;YACfA,cAAcA,EAAEA,CAACA;QACrBA,CAACA;QACDA,iBAAiBA,CAACA,IAAIA,CAACA;YACnBA,WAAWA,CAACA,IAAIA,CAACA,UAACA,KAA2CA,EAAEA,KAAaA,EAAEA,KAA6CA;gBACvHA,EAAEA,CAACA,CAACA,KAAKA,IAAIA,KAAKA,CAACA,UAAUA,IAAIA,KAAKA,CAACA,UAAUA,CAACA,SAASA,IAAIA,KAAKA,CAACA,UAAUA,CAACA,UAAUA,CAACA,CAACA,CAACA;oBACzFA,EAAEA,CAACA,CAACA,MAAMA,IAAIA,KAAKA,CAACA,UAAUA,CAACA,SAASA,IAAIA,MAAMA,IAAIA,KAAKA,CAACA,UAAUA,CAACA,UAAUA,CAACA,CAACA,CAACA;wBAChFA,QAAQA,CAACA,OAAOA,CAACA,KAAKA,CAACA,EAAEA,CAACA,CAACA;wBAC3BA,MAAMA,CAACA,IAAIA,CAACA;oBAChBA,CAACA;gBACLA,CAACA;gBACDA,MAAMA,CAACA,KAAKA,CAACA;YACjBA,CAACA,CAACA,CAACA;QACPA,CAACA,CAACA,CAACA;QACHA,MAAMA,CAACA,QAAQA,CAACA,OAAOA,CAACA;IAC5BA,CAACA;IAjBe,sBAAc,iBAiB7B,CAAA;IAED;QACIC,WAAWA,GAAGA,EAAEA,CAACA;QACjBA,IAAIA,UAAUA,GAAGA,GAAGA,CAACA,aAAaA,EAAEA,CAACA;QACrCA,IAAIA,WAAWA,GAAmCA,EAACA,SAASA,EAAEA,UAAUA,CAACA,OAAOA,CAACA,EAAEA,EAAEA,MAAMA,EAAEA,UAAUA,CAACA,IAAIA,CAACA,EAAEA,EAAEA,OAAOA,EAAEA,EAAEA,EAAEA,IAAIA,EAAEA,EAAEA,EAACA,CAACA;QACxIA,IAAIA,UAAUA,GAA+BA,OAAOA,CAACA,aAAaA;aAC7DA,aAAaA,EAAEA;aACfA,aAAaA,CAACA,WAAWA,CAACA,cAAcA,EAAEA,gBAAgBA,CAACA,oBAAoBA,CAACA,GAAGA,CAACA,CAACA;QAE1FA,UAAUA,CAACA,iBAAiBA,CAACA,WAAWA,CAACA,CAACA,IAAIA,CAC1CA,UAACA,UAAkDA;YAC/CA,UAAUA,CAACA,OAAOA,CAACA,UAACA,SAA+CA,EAAEA,KAAaA,EAAEA,KAA6CA;gBAC7HA,WAAWA,CAACA,IAAIA,CAACA,SAASA,CAACA,CAACA;YAChCA,CAACA,CAACA,CAACA;YAEHA,mBAAmBA,CAACA,OAAOA,CAACA,EAAEA,CAACA,CAACA;QAEpCA,CAACA,EACDA,UAACA,CAAQA;YACLA,mBAAmBA,CAACA,OAAOA,CAACA,EAAEA,CAACA,CAACA;QACpCA,CAACA,CAACA,CAACA;IACXA,CAACA","file":"Calendar/Utils/Date.js","sourcesContent":["import Calendar_Contracts = require(\"Calendar/Contracts\");\r\nimport Q = require(\"q\");\r\nimport Service = require(\"VSS/Service\");\r\nimport TFS_Core_Contracts = require(\"TFS/Core/Contracts\");\r\nimport WebApi_Constants = require(\"VSS/WebApi/Constants\");\r\nimport Work_Client = require(\"TFS/Work/RestClient\");\r\nimport Work_Contracts = require(\"TFS/Work/Contracts\");\r\n\r\nfunction ensureDate(date: string | Date): Date {\r\n    if (typeof date === \"string\") {\r\n        return new Date(<string>date);\r\n    }\r\n\r\n    return <Date>date;\r\n}\r\n\r\n/**\r\n * Checks whether the specified date is between 2 dates\r\n * @param date Date to check\r\n * @param startDate Start date\r\n * @param endDate End date\r\n * @return True if date is between 2 dates, otherwise false\r\n */\r\nexport function isBetween(date: Date, startDate: Date, endDate: Date): boolean {\r\n    var ticks = date.getTime();\r\n    return ticks >= startDate.getTime() && ticks <= endDate.getTime();\r\n}\r\n\r\n/**\r\n * Checks whether the specified event is within the dates of specified query\r\n * @param event Event to query\r\n * @param query Start date and end dates to check\r\n * @return True if event satisfies query, otherwise false\r\n */\r\nexport function eventIn(event: Calendar_Contracts.CalendarEvent, query: Calendar_Contracts.IEventQuery): boolean {\r\n    if (!query || !query.startDate || !query.endDate) {\r\n        return false;\r\n    }\r\n\r\n    if (isBetween(ensureDate(event.startDate), query.startDate, query.endDate)) {\r\n        return true;\r\n    }\r\n\r\n    if (isBetween(ensureDate(event.endDate), query.startDate, query.endDate)) {\r\n        return true;\r\n    }\r\n\r\n    return false;\r\n}\r\n\r\nvar _iterations: Work_Contracts.TeamSettingsIteration[];\r\nvar _iterationsDeferred: Q.Deferred<any> = Q.defer<any>();\r\nvar _iterationsLoaded = _iterationsDeferred.promise;\r\n\r\nexport function getIterationId(dayOff: Date): IPromise<string> {\r\n    var deferred = Q.defer<string>();\r\n    if (!_iterations) {\r\n        loadIterations();\r\n    }\r\n    _iterationsLoaded.then(() => {\r\n        _iterations.some((value: Work_Contracts.TeamSettingsIteration, index: number, array: Work_Contracts.TeamSettingsIteration[]) => {\r\n            if (value && value.attributes && value.attributes.startDate && value.attributes.finishDate) {\r\n                if (dayOff >= value.attributes.startDate && dayOff <= value.attributes.finishDate) {\r\n                    deferred.resolve(value.id);\r\n                    return true;\r\n                }\r\n            }\r\n            return false;\r\n        });\r\n    });\r\n    return deferred.promise;\r\n}\r\n\r\nfunction loadIterations(): void {\r\n    _iterations = [];\r\n    var webContext = VSS.getWebContext();\r\n    var teamContext: TFS_Core_Contracts.TeamContext = {projectId: webContext.project.id, teamId: webContext.team.id, project: \"\", team: \"\"};\r\n    var workClient: Work_Client.WorkHttpClient = Service.VssConnection\r\n        .getConnection()\r\n        .getHttpClient(Work_Client.WorkHttpClient, WebApi_Constants.ServiceInstanceTypes.TFS);\r\n    \r\n    workClient.getTeamIterations(teamContext).then(\r\n        (iterations: Work_Contracts.TeamSettingsIteration[]) => {\r\n            iterations.forEach((iteration: Work_Contracts.TeamSettingsIteration, index: number, array: Work_Contracts.TeamSettingsIteration[]) => {\r\n                _iterations.push(iteration);\r\n            });\r\n\r\n            _iterationsDeferred.resolve([]);\r\n\r\n        },\r\n        (e: Error) => {\r\n            _iterationsDeferred.resolve([]);\r\n        });\r\n}"],"sourceRoot":"/source/"}